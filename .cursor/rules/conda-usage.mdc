---
description: 
globs: 
alwaysApply: true
---
# Conda环境使用规则

## 环境命名和一致性

项目使用与项目名称相同的Conda环境：`api-detector`。这种一致性方便识别和管理。

## 重要提示：始终激活环境

⚠️ **必须在执行任何Python命令前激活环境**

```bash
# 必须首先执行此命令
conda activate api-detector

# 然后再执行其他Python命令
python app/main.py
```

## 环境检查工具

项目提供了两个关键工具来确保环境正确使用：

1. [scripts/check_env.py](mdc:scripts/check_env.py) - 检查当前是否在正确的环境中
2. [scripts/run_dev.sh](mdc:scripts/run_dev.sh) - 自动检查并激活环境，启动开发服务器

## 环境创建流程

首次设置项目时，按照以下步骤创建环境：

```bash
# 创建与项目同名的环境
conda create -n api-detector python=3.10 -y

# 激活环境
conda activate api-detector

# 安装依赖
conda env update -f environment.yml
```

## 环境管理最佳实践

### 总是显式激活环境

在执行任何Python命令前，确保环境已激活：

```bash
conda activate api-detector
python scripts/check_env.py  # 验证环境
```

### 共享环境更新

添加新依赖后，更新环境文件并通知团队：

```bash
# 安装新包
conda install new-package  # 或 pip install new-package

# 更新环境定义
conda env export --no-builds | grep -v "^prefix: " > environment.yml

# 提交更新的environment.yml
git add environment.yml
git commit -m "添加new-package依赖"
```

### 启动开发服务器

始终使用提供的启动脚本，它会自动检查环境：

```bash
./scripts/run_dev.sh
```

## 常见问题解决

### 环境激活问题

如果`conda activate`命令不起作用，可能需要初始化conda：

```bash
# Bash用户
source $(conda info --base)/etc/profile.d/conda.sh

# Zsh用户
source $(conda info --base)/etc/profile.d/conda.sh
```

### 依赖冲突

遇到依赖冲突时：

1. 导出当前环境：`conda env export > before.yml`
2. 尝试逐一安装冲突的包以查找冲突源
3. 必要时创建新的环境进行测试：`conda create -n api-detector-test python=3.10`
